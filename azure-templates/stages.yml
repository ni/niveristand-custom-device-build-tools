parameters:
  - name: stageName
    type: string
    default: Build

  - name: disableDiff
    type: boolean
    default: false

  # lvVersionsToBuild: list of {version, bitness}
  - name: lvVersionsToBuild
    type: object

  # codegenVis (optional): string array of codegen VI paths
  - name: codegenVis
    type: object
    default:
      - ''

  # dependencies (optional): list of {source, file, destination}
  - name: dependencies
    type: object
    default:
      - file: ''

  # buildSteps (optional): list of {projectLocation, buildOperation, target, buildSpec}
  - name: buildSteps
    type: object
    default: ''

  # packages (optional): list of {controlFileName, payloadMaps: list of {payloadLocation, installLocation} }
  - name: packages
    type: object
    default:
      - controlFileName: ''

  # submodules (optional): boolean of whether to use submodules
  - name: submodules
    type: boolean
    default: false

  # strings (releaseVersion, quarterlyReleaseVersion, buildOutputLocation, archiveLocation)
  - name: releaseVersion
    type: string
  - name: quarterlyReleaseVersion
    type: string
    default: 1999
  - name: buildOutputLocation
    type: string
  - name: archiveLocation
    type: string

# Note: If custom build steps are needed for a particular custom device, copy this entire template into the azure-pipeline and add steps before/after as needed
stages:
  - stage: DiffVIs${{ parameters.stageName }}
    dependsOn: []
    condition: and(eq(variables['Build.Reason'], 'PullRequest'), eq('${{ parameters.disableDiff }}', false))
    pool:
      name: DevCentral-VeriStand-CustomDevices
      demands:
        - agent.os -equals Windows_NT
    jobs:
      - job: Find64bitVersion
        steps:
          - powershell: |
              $lvVersionsToBuild = '${{ convertToJson(parameters.lvVersionsToBuild) }}' | ConvertFrom-Json
              ForEach ($lvVersionToBuild in $lvVersionsToBuild)
              {
                if ($lvVersionToBuild.bitness -eq "64bit")
                {
                  $bitness = $lvVersionToBuild.bitness
                  $version = $lvVersionToBuild.version
                  Write-Host "##vso[task.setvariable variable=bitness;isOutput=true;]$bitness"
                  Write-Host "##vso[task.setvariable variable=version;isOutput=true;]$version"
                }
              }
            name: FindLast64bitVersion
      - job: DiffVIsforPR
        displayName: Diff VIs for PR
        dependsOn: ['Find64bitVersion']
        variables:
          - group: niveristand-custom-devices
          - name: diffBitness
            value: $[ dependencies.Find64bitVersion.outputs['FindLast64bitVersion.bitness'] ]
          - name: diffVersion
            value: $[ dependencies.Find64bitVersion.outputs['FindLast64bitVersion.version'] ]
        steps:
          - template: steps-pre-build.yml # Configure variables, check out repos, Clear cache
            parameters:
              lvVersionToBuild:
                version:               $(diffVersion)
                bitness:               $(diffBitness)
              releaseVersion:          ${{ parameters.releaseVersion }}
              archiveLocation:         ${{ parameters.archiveLocation }}
              buildOutputLocation:     ${{ parameters.buildOutputLocation }}
              codegenVis:              ${{ parameters.codegenVis }}
              submodules:              ${{ parameters.submodules }}
          - template: steps-diff.yml
            parameters:
              lvVersionToDiff:         $(diffVersion)

  - stage: ${{ parameters.stageName }}
    dependsOn: []
    pool:
      name: DevCentral-VeriStand-CustomDevices
      demands:
        - agent.os -equals Windows_NT
    # build counter is used to label nipkg output - it cannot be defined inside of the templates below due to restrictions with the "counter" function
    variables:
      ${{ if ne(variables['Build.Reason'], 'PullRequest')}}:
        buildCounter: $[counter(variables['Build.SourceBranch'], 1)]
      ${{ if eq(variables['Build.Reason'], 'PullRequest')}}:
        buildCounter: "9999"
    jobs:
      - ${{ each lvVersionToBuild in parameters.lvVersionsToBuild }}:
        - job: Job${{ lvVersionToBuild.version }}_${{ lvVersionToBuild.bitness }}
          displayName: LabVIEW ${{ lvVersionToBuild.version }} ${{ parameters.lvVersionsToBuild.bitness }}
          timeoutInMinutes: 120
          steps:
            - template: steps-pre-build.yml # Configure variables, check out repos, Clear cache
              parameters:
                lvVersionToBuild:        ${{ lvVersionToBuild }}
                releaseVersion:          ${{ parameters.releaseVersion }}
                archiveLocation:         ${{ parameters.archiveLocation }}
                buildOutputLocation:     ${{ parameters.buildOutputLocation }}
                codegenVis:              ${{ parameters.codegenVis }}
                submodules:              ${{ parameters.submodules }}

            - ${{ if ne( parameters.buildSteps, '' )}}:
              - ${{ each buildStep in parameters.buildSteps }}:
                  - template: steps-build.yml # config file and build specs
                    parameters:
                      buildStep:          ${{ buildStep }}
                      dependencies:       ${{ parameters.dependencies }}
                      lvVersionToBuild:   ${{ lvVersionToBuild }}

            - template: steps-post-build.yml # nipkg and archive
              parameters:
                packages: ${{ parameters.packages }}

        # if all jobs have passed, place .finished file in top level archive location
      - job: Finalize
        displayName: Final Validation
        dependsOn:
          - ${{ each lvVersionToBuild in parameters.lvVersionsToBuild }}:
            - Job${{ lvVersionToBuild.version }}_${{ lvVersionToBuild.bitness }}
        condition: succeeded()
        steps:
          # archivePath defined in pre-job-steps.yml
        - powershell: |
            If ('$(Build.Reason)' -eq 'PullRequest')
            {
              Write-Output "Setting variables for Pull Requests..."
              $sourceBranch = "$(System.PullRequest.SourceBranch)"
              Write-Output "Source branch $(System.PullRequest.SourceBranch)"
            }
            Else
            {
              Write-Output "Setting variables for general builds..."
              $sourceBranch = "$(Build.SourceBranch)" -replace 'refs/heads/', ''
              Write-Output "Source branch $(Build.SourceBranch), removed refs/heads/"
            }
            Write-Output "Using $sourceBranch in final validation path..."
            Write-Output "All previous jobs complete.  Storing .finished file..."
            New-Item `
              -Path "${{ parameters.archiveLocation }}\NI\export\$sourceBranch\$(Build.BuildNumber)" `
              -Name ".finished" `
              -ItemType "File"