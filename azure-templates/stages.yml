parameters:
  # lvVersionsToBuild: list of {version, bitness}
  - name: lvVersionsToBuild
    type: object

  # buildSteps: list of {projectLocation, buildOperation, target, buildSpec}
  - name: buildSteps
    type: object
  # dependencies (optional): list of {source, file, destination}
  - name: dependencies
    type: object
    default:
      - file: ''
  # packages: list of {controlFileName, payloadMaps: list of {payloadLocation, installLocation} }
  - name: packages
    type: object
  # strings (releaseVersion, quarterlyReleaseVersion, buildOutputLocation, archiveLocation)
  - name: releaseVersion
    type: string
  - name: quarterlyReleaseVersion
    type: string
  - name: buildOutputLocation
    type: string
  - name: archiveLocation
    type: string
  # pack (optional)
  - name: pack
    type: boolean
    default: false

# Note: If custom build steps are needed for a particular custom device, copy this entire template into the azure-pipeline and add steps before/after as needed
stages:
  - stage: Build
    pool:
      name: custom-device-temp # TEMPORARY, eventually use an official build pool of custom device agents!!
      demands:
        - agent.os -equals Windows_NT
    jobs:
      - ${{ each lvVersionToBuild in parameters.lvVersionsToBuild }}:
        - job: Job${{ lvVersionToBuild.version }}_${{ lvVersionToBuild.bitness }}
          displayName: LabVIEW ${{ lvVersionToBuild.version }}
          steps:
            - template: steps-pre-build.yml # Configure variables, check out repos, Clear cache
              parameters:
                lvVersionToBuild:        ${{ lvVersionToBuild }}
                releaseVersion:          ${{ parameters.releaseVersion }}
                quarterlyReleaseVersion: ${{ parameters.quarterlyReleaseVersion }}
                archiveLocation:         ${{ parameters.archiveLocation }}
                buildOutputLocation:     ${{ parameters.buildOutputLocation }}

            - ${{ each buildStep in parameters.buildSteps }}:
              - template: steps-build.yml # config file and build specs
                parameters:
                  buildStep:    ${{ buildStep }}
                  dependencies: ${{ parameters.dependencies }}

            - template: steps-post-build.yml # nipkg and archive
              parameters:
                packages: ${{ parameters.packages }}
                pack:     ${{ parameters.pack }}
        # if all jobs have passed, place .finished file in top level archive location TEMPORARY - linked to imitation-cd instead of build-tools
      - job: Finalize
        displayName: Final Validation
        dependsOn:
          - ${{ each lvVersionToBuild in parameters.lvVersionsToBuild }}:
            - Job${{ lvVersionToBuild.version }}_${{ lvVersionToBuild.bitness }}
        condition: succeeded()
        steps:
          # archivePath defined in pre-job-steps.yml
        - powershell: |
            If ('$(Build.Reason)' -eq 'PullRequest')
            {
              Write-Output "Setting variables for Pull Requests..."
              $sourceBranch = "$(System.PullRequest.SourceBranch)" -replace 'dev/', ''
            } 
            Else
            {
              Write-Output "Setting variables for general builds..."
              $sourceBranch = "$(Build.SourceBranchName)"
            }
            Write-Output "Using $sourceBranch in final validation path..."
            Write-Output "All previous jobs complete.  Storing .finished file..."
            New-Item `
              -Path "${{ parameters.archiveLocation }}\NI\export\$sourceBranch\$(Build.BuildNumber)" `
              -Name ".finished" `
              -ItemType "File"