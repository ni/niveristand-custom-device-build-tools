parameters:
  - name: stageName
    type: string
    default: Build

  - name: disableDiff
    type: boolean
    default: false

  - name: silenceDependencyFailures
    type: boolean
    default: false

  # lvVersionsToBuild: list of {version, bitness}
  - name: lvVersionsToBuild
    type: object

  # codegenVis (optional): string array of codegen VI paths
  - name: codegenVis
    type: object
    default:
      - ''

  # dependencies (optional): list of {source, file, destination}
  - name: dependencies
    type: object
    default:
      - file: ''

  # buildSteps (optional): list of {projectLocation, buildOperation, target, buildSpec}
  - name: buildSteps
    type: object
    default: ''

  # packages (optional): list of {controlFileName, payloadMaps: list of {payloadLocation, installLocation} }
  - name: packages
    type: object
    default:
      - controlFileName: ''

  # submodules (optional): boolean of whether to use submodules
  - name: submodules
    type: boolean
    default: false

  # strings (releaseVersion, quarterlyReleaseVersion, buildOutputLocation, archiveLocation)
  - name: releaseVersion
    type: string
  - name: buildOutputLocation
    type: string
  - name: archiveLocation
    type: string

# Note: If custom build steps are needed for a particular custom device, copy this entire template into the azure-pipeline and add steps before/after as needed
stages:
  - stage: ${{ parameters.stageName }}_DiffVIs
    dependsOn: []
    condition: and(eq(variables['Build.Reason'], 'PullRequest'), eq('${{ parameters.disableDiff }}', false))
    pool:
      name: DevCentral-VeriStand-CustomDevices
      demands:
        - agent.os -equals Windows_NT
    jobs:
      - job: Find64bitVersion
        steps:
          - powershell: |
              $lvVersionsToBuild = '${{ convertToJson(parameters.lvVersionsToBuild) }}' | ConvertFrom-Json
              ForEach ($item in $lvVersionsToBuild)
              {
                if ($item.bitness -eq "64bit")
                {
                  $bitness = $item.bitness
                  $version = $item.version
                  Write-Host "##vso[task.setvariable variable=bitness;isOutput=true;]$bitness"
                  Write-Host "##vso[task.setvariable variable=version;isOutput=true;]$version"
                }
              }
            name: FindLast64bitVersion
      - job: DiffVIsforPR
        displayName: Diff VIs for PR
        dependsOn: ['Find64bitVersion']
        variables:
          - group: niveristand-custom-devices
          - name: diffBitness
            value: $[ dependencies.Find64bitVersion.outputs['FindLast64bitVersion.bitness'] ]
          - name: diffVersion
            value: $[ dependencies.Find64bitVersion.outputs['FindLast64bitVersion.version'] ]
        steps:
          - template: steps-prepare.yml
            parameters:
              build: False
              clearCache: False
          - template: steps-diff.yml
            parameters:
              lvVersionToDiff: $(diffVersion)

  - stage: ${{ parameters.stageName }}
    dependsOn: []
    variables:
      ${{ if ne(variables['Build.Reason'], 'PullRequest')}}:
        CD.BuildCounter: $[counter(format('custom {0}', variables['Build.SourceBranch']), 1)]
      ${{ if eq(variables['Build.Reason'], 'PullRequest')}}:
        CD.BuildCounter: "9999"
    pool:
      name: DevCentral-VeriStand-CustomDevices
      demands:
        - agent.os -equals Windows_NT
    jobs:
        # Build Jobs
      - ${{ each item in parameters.lvVersionsToBuild }}:
        - job: Job_Build_${{ item.version }}_${{ item.bitness }}
          displayName: Build LabVIEW ${{ item.version }} ${{ item.bitness }}
          timeoutInMinutes: 120
          steps:
            - template: steps-prepare.yml
              parameters:
                lvVersion:           ${{ item.version }}
                bitness:             ${{ item.bitness }}
                releaseVersion:      ${{ parameters.releaseVersion }}
                archiveLocation:     ${{ parameters.archiveLocation }}
                buildOutputLocation: ${{ parameters.buildOutputLocation }}
                codegenVis:          ${{ parameters.codegenVis }}
                submodules:          ${{ parameters.submodules }}

            - ${{ if ne( parameters.buildSteps, '' )}}:
              - ${{ each buildStep in parameters.buildSteps }}:
                  - template: steps-build.yml
                    parameters:
                      buildStep:                 ${{ buildStep }}
                      dependencies:              ${{ parameters.dependencies }}
                      lvVersionToBuild:          ${{ item }}
                      silenceDependencyFailures: ${{ parameters.silenceDependencyFailures }}

            - task: PowerShell@2
              displayName: Copy built files to Archive location
              inputs:
                targetType: 'filePath'
                filePath: 'niveristand-custom-device-build-tools/azure-templates/powershell-scripts/archive-build.ps1'
                failOnStdErr: True

        # Packaging Jobs
      - job: Job_Package_All
        dependsOn:
          - ${{ each item in parameters.lvVersionsToBuild }}:
            - Job_Build_${{ item.version }}_${{ item.bitness }}
        displayName: Package Installers
        variables: 
          CD.Package.Finished: ""
        steps:
          - ${{ each item in parameters.lvVersionsToBuild }}:
            - template: steps-prepare.yml
              parameters:
                  lvVersion:           ${{ item.version }}
                  bitness:             ${{ item.bitness }}
                  releaseVersion:      ${{ parameters.releaseVersion }}
                  archiveLocation:     ${{ parameters.archiveLocation }}
                  buildOutputLocation: ${{ parameters.buildOutputLocation }}
                  clearCache:          False

            - template: steps-packaging.yml
              parameters:
                lvVersion: ${{ item.version }}
                packages:  ${{ parameters.packages }}

        # Finalization: if all jobs have passed, place .finished file in top level archive location
      - job: Finalize
        displayName: Final Validation
        dependsOn:
          - Job_Package_All
        condition: succeeded()
        steps:
        - template: steps-prepare.yml
          parameters:
            archiveLocation: ${{ parameters.archiveLocation }}
            build: False
            clearCache: False

        - task: PowerShell@2
          displayName: Add .finished to directory
          inputs:
            targetType: 'filePath'
            filePath: 'niveristand-custom-device-build-tools/azure-templates/powershell-scripts/finalization.ps1'
            failOnStdErr: True