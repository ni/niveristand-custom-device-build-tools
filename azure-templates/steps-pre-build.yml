parameters:
  - name: lvVersionToBuild
    type: object
  - name: releaseVersion
    type: string
  - name: archiveLocation
    type: string
  - name: buildOutputLocation
    type: string
  - name: codegenVis
    type: object

steps:
    # Variables that are set in a powershell script cannot be used within the same script
    # because the variables are resolved when the script is first loaded, so generate all
    # variables at the beginning.
  - task: PowerShell@2
    displayName: Configure Job-wide Variables for LabVIEW ${{ parameters.lvVersionToBuild.version }} ${{ parameters.lvVersionToBuild.bitness }}
    inputs:
      targetType: 'inline'
      failOnStdErr: true
      script: |
        Write-Output "Defining repository variables..."
        Write-Host '##vso[task.setvariable variable=buildTools]niveristand-custom-device-build-tools'
        If ('$(Build.Reason)' -eq 'PullRequest')
        {
          Write-Output "Setting variables for Pull Requests..."
          $sourceBranch = "$(System.PullRequest.SourceBranch)" -replace 'dev/', ''
        }
        Else
        {
          Write-Output "Setting variables for general builds..."
          $sourceBranch = "$(Build.SourceBranchName)"
        }
        Write-Output "Using $sourceBranch in archive path..."
        Write-Host "##vso[task.setvariable variable=sourceBranch]$sourceBranch"
        Write-Host "##vso[task.setvariable variable=archivePath]${{ parameters.archiveLocation }}\NI\export\$sourceBranch\"
        $customDeviceRepoName = '$(Build.Repository.Name)' -replace '.+\/', ''
        Write-Host "##vso[task.setvariable variable=customDeviceRepoName]$customDeviceRepoName"
        Write-Host "##vso[task.setvariable variable=buildOutputPath]$customDeviceRepoName\${{ parameters.buildOutputLocation }}"
        Write-Host "##vso[task.setvariable variable=nipkgPath]$customDeviceRepoName\nipkg"
        `
        Write-Output 'Determining quarterlyReleaseVersion...'
        $releaseData = "${{ parameters.releaseVersion }}" -Split "\."
        If ($releaseData[1] -eq "0")
        {
          $derivedQuarterlyReleaseVersion = "20$($releaseData[0]) Q1"
        }
        If ($releaseData[1] -eq "3")
        {
        $derivedQuarterlyReleaseVersion = "20$($releaseData[0]) Q2"
        }
        If ($releaseData[1] -eq "5")
        {
          $derivedQuarterlyReleaseVersion = "20$($releaseData[0]) Q3"
        }
        If ($releaseData[1] -eq "8")
        {
          $derivedQuarterlyReleaseVersion = "20$($releaseData[0]) Q4"
        }
        Write-Output "Configuring release version to ${{ parameters.releaseVersion }} and quarterlyReleaseVersion to $($derivedQuarterlyReleaseVersion)..."
        Write-Host "##vso[task.setvariable variable=releaseVersion]${{ parameters.releaseVersion }}"
        Write-Host "##vso[task.setvariable variable=quarterlyReleaseVersion]$derivedQuarterlyReleaseVersion"
        Write-Host "##vso[task.setvariable variable=lvVersion]${{ parameters.lvVersionToBuild.version }}"
        If ('${{ parameters.lvVersionToBuild.bitness }}' -eq '32bit')
        {
          Write-Output "Setting variables for 32-bit..."
          Write-Host '##vso[task.setvariable variable=lvPath]C:\Program Files (x86)\National Instruments\LabVIEW ${{ parameters.lvVersionToBuild.version }}'
          Write-Host '##vso[task.setvariable variable=architecture]x86'
          Write-Host '##vso[task.setvariable variable=nipkgx86suffix]-x86'
          Write-Host '##vso[task.setvariable variable=nipkgx64suffix]'
        }
        Elseif ('${{ parameters.lvVersionToBuild.bitness }}' -eq '64bit')
        {
          Write-Output "Setting variables for 64-bit..."
          Write-Host '##vso[task.setvariable variable=lvPath]C:\Program Files\National Instruments\LabVIEW ${{ parameters.lvVersionToBuild.version }}'
          Write-Host '##vso[task.setvariable variable=architecture]x64'
          Write-Host '##vso[task.setvariable variable=nipkgx86suffix]'
          Write-Host '##vso[task.setvariable variable=nipkgx64suffix]64'
        }
        Else
        {
          Write-Error "Invalid Bitness defined in pipeline.  Use either 32bit or 64bit."
        }
        `
        If ('${{ parameters.lvVersionToBuild.version }}' -eq '2020')
        {
          Write-Output "Setting variables for LabVIEW 2020..."
          Write-Host '##vso[task.setvariable variable=lvConfigVersion]8.0.0.0'
          Write-Host '##vso[task.setvariable variable=shortLvVersion]20'
        }
        Elseif ('${{ parameters.lvVersionToBuild.version }}' -eq '2021')
        {
          Write-Output "Setting variables for LabVIEW 2021..."
          Write-Host '##vso[task.setvariable variable=lvConfigVersion]9.0.0.0'
          Write-Host '##vso[task.setvariable variable=shortLvVersion]21'
        }
        Elseif ('${{ parameters.lvVersionToBuild.version }}' -eq '2023')
        {
          Write-Output "Setting variables for LabVIEW 2023..."
          Write-Host '##vso[task.setvariable variable=lvConfigVersion]10.0.0.0'
          Write-Host '##vso[task.setvariable variable=shortLvVersion]23'
        }
        Else
        {
          Write-Error "Invalid LabVIEW version defined in pipeline.  Use either 2020, 2021, or 2023."
        }

  - powershell: Write-Host '##vso[task.setvariable variable=lvCLICall]LabVIEWCLI -PortNumber 3363 -LabVIEWPath "$(lvPath)\LabVIEW.exe" -AdditionalOperationDirectory "%cd%\$(buildTools)\lv\operations"'
    displayName: Set LabVIEWCLI path

  - checkout: niveristand-custom-device-build-tools
    displayName: Check out NI VS Custom Device Build Tools repository

    # The checkout order doesn't matter in most cases, but we want the dev branch (self) to be checked out last so that it's used for PR builds in niveristand-custom-device-build-tools
  - checkout: self
    displayName: Check out repository to build

  - task: CmdLine@2
    displayName: Clear compiled cache for LabVIEW ${{ parameters.lvVersionToBuild.version }}
    inputs:
      script: |
        echo on
        $(lvCLICall) ^
          -OperationName "SecureRunVI" ^
          -VIPath "%cd%\$(buildTools)\lv\operations\Utilities\ClearCache.vi" ^
          -LogFilePath "%cd%\$(customDeviceRepoName)\lvClearCache.log"

  - ${{ each codegenVi in parameters.codegenVis }}:
    - ${{ if ne(codegenVi, '' )}}:
      - task: CmdLine@2
        displayName: Run codegen step ${{ codegenVi }}
        inputs:
          script: |
            echo on
            $(lvCLICall) ^
              -OperationName "SecureRunVI" ^
              -VIPath "%cd%\$(customDeviceRepoName)\${{ codegenVi }}" ^
              -LogFilePath "%cd%\$(customDeviceRepoName)\lvCodegen.log"