parameters:
  - name: projectLocation
    type: string
  - name: buildOperation
    type: string
  - name: target
    type: string
    default: ''
  - name: buildSpec
    type: string
    default: ''
  - name: dependencies
    type: object
    default:
      - file: ''

steps:

###########  Pull Dependencies in from latest build locations  ###########
  - ${{ each dependency in parameters.dependencies }}: # TEMPORARY - default branchName is 'azure-pipelines' until things are actually committed to main on dependencies
    - ${{ if ne( dependency.file, '' )}}:
      - ${{ if eq( parameters.target, 'My Computer' )}}:
        - powershell: Write-Output "##vso[task.setvariable variable=dependencyTargetDirectory]Windows"
          displayName: set target for dependency to Windows
      - ${{ if eq( parameters.target, 'Linux x64' )}}:
        - powershell: Write-Output "##vso[task.setvariable variable=dependencyTargetDirectory]Linux_x64"
          displayName: set target for dependency to Linux RT
      - powershell: |
          $branchName = 'azure-pipeline'
          If (Test-Path -Path '${{ dependency.source }}\NI\export\$(Build.SourceBranchName)*\$(lvVersion)\$(architecture)') 
          {
            $branchName = '$(Build.SourceBranchName)'
          }
          $dependencyFilePath = Get-ChildItem `
            -Path "${{ dependency.source }}\NI\export\$branchName\*\$(lvVersion)\$(architecture)\$(dependencyTargetDirectory)\*" `
            -Recurse `
            -Include '*${{ dependency.file }}' `
            | Sort {$_.LastWriteTime} `
            | select -last 1
          If (-not(Test-Path -Path '$(customDeviceRepoName)\${{ dependency.destination }}'))
          {
            New-Item `
              -Path '$(customDeviceRepoName)\${{ dependency.destination }}' `
              -ItemType 'Directory'
          }
          Copy-Item `
            -Path $dependencyFilePath `
            -Destination '$(customDeviceRepoName)\${{ dependency.destination }}\' `
            -Recurse `
            -Force
        displayName: Copy ${{ dependency.file }} to ${{ dependency.destination }}

###########  Set lvproj Config  ###########
  - powershell: |
      $fileExists = Test-Path -Path "$(customDeviceRepoName)\${{ parameters.projectLocation }}.config"
      Write-Output "##vso[task.setvariable variable=configFileExists]$fileExists"
    displayName: Check if config file exists already for ${{ parameters.projectLocation }}

  - powershell: |
      $lvConfigFilePath = '$(customDeviceRepoName)\${{ parameters.projectLocation }}.config'
      Copy-Item "$(buildTools)\resources\LabVIEW.exe.config" -Destination $lvConfigFilePath
      (Get-Content -Path $lvConfigFilePath) -replace '2016.0.0.0', '$(lvConfigVersion)' | Set-Content -Path $lvConfigFilePath
    displayName: Place lvproj.config file for ${{ parameters.projectLocation }}
    condition: and(succeeded(), eq(variables['configFileExists'], 'False')) # skip if lvproj.config already placed

###########  Execute LabVIEW Build Operation  ###########
  - powershell: |
      Write-Host '##vso[task.setvariable variable=targetArgument]'
      Write-Host '##vso[task.setvariable variable=buildSpecArgument]'
    displayName: reset TargetName and BuildSpec

  - powershell: Write-Host '##vso[task.setvariable variable=targetArgument]-TargetName "${{ parameters.target }}" '
    displayName: specify TargetNames
    condition: and(succeeded(), ne('${{ parameters.target }}', ''))

  - powershell: Write-Host '##vso[task.setvariable variable=buildSpecArgument]-BuildSpecName "${{ parameters.buildSpec }}" '
    displayName: specify BuildSpecs
    condition: and(succeeded(), ne('${{ parameters.buildSpec }}', ''))

  - script: |
      echo on
      $(lvCLICall) ^
      -OperationName "${{ parameters.buildOperation }}" ^
      -ProjectPath "%cd%\$(customDeviceRepoName)\${{ parameters.projectLocation }}" ^
      $(targetArgument) ^
      $(buildSpecArgument) ^
      -LogFilePath "%cd%\$(customDeviceRepoName)\lvBuildSpecs.log"
    displayName: Build ${{ parameters.buildSpec }} on ${{ parameters.target }} in ${{ parameters.projectLocation }}

  - script: taskkill /im labview.exe /f
    displayName: Close LabVIEW
    condition: always() # close LabVIEW even if previous steps failed


